package com.sina.parkingApplication.service.impl;import com.sina.parkingApplication.common.exception.NotFoundException;import com.sina.parkingApplication.model.PriceRate;import com.sina.parkingApplication.repository.PriceRateRepository;import com.sina.parkingApplication.service.IPriceRateService;import lombok.AllArgsConstructor;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Sort;import org.springframework.stereotype.Service;import java.util.Optional;@AllArgsConstructor@Servicepublic class PriceRateService implements IPriceRateService {    private final PriceRateRepository priceRateRepository;    @Override    public PriceRate addPriceRate(PriceRate priceRate) {        return priceRateRepository.save(priceRate);    }    @Override    public void deletePriceRate(Long priceRateId) {        PriceRate priceRate = getPriceRate(priceRateId);        priceRateRepository.delete(priceRate);    }    @Override    public PriceRate updatePriceRate(PriceRate priceRate) {        PriceRate savedBefore = getPriceRate(priceRate.getId());        savedBefore.setHourlyRate(priceRate.getHourlyRate());        savedBefore.setDailyRate(priceRate.getDailyRate());        savedBefore.setMonthlyRate(priceRate.getMonthlyRate());        return priceRateRepository.save(savedBefore);    }    @Override    public PriceRate getPriceRate(Long priceRateId) {        Optional<PriceRate> optionalPriceRate = priceRateRepository.findById(priceRateId);        if (optionalPriceRate.isPresent()) {            return optionalPriceRate.get();        }        throw new NotFoundException("priceRate not found");    }    @Override    public Page<PriceRate> paging(Integer page, Integer size) {        return priceRateRepository.findAll(PageRequest.of(page, size, Sort.by("id").ascending()));    }}